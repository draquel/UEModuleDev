#include "/Engine/Public/Platform.ush"

RWTexture2D<float3> RenderTarget;
float3 Position;
float3 Offset;
int Octaves;
float Lacunarity;
float Persistence;
float Scale;

// Permutation table for Perlin noise
static const int perm[256] = {
    151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,
    8,99,37,240,21,10,23,190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,
    35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,
    134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,
    55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,
    18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,
    250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,
    189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,
    43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,
    97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,
    107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,
    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
};

// Helper functions for Perlin noise
float Fade(float t) {
    return t * t * t * (t * (t * 6 - 15) + 10);
}

float Lerp(float t, float a, float b) {
    return a + t * (b - a);
}

//2D
float Grad(int hash, float x, float y) {
    int h = hash & 15;
    float u = h < 8 ? x : y;
    float v = h < 4 ? y : h == 12 || h == 14 ? x : 0.0;
    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

float PerlinNoise(float x, float y) {
    int X = (int)floor(x) & 255;
    int Y = (int)floor(y) & 255;
    x -= floor(x);
    y -= floor(y);
    float u = Fade(x);
    float v = Fade(y);
    int A = (perm[X    ] + Y) & 255;
    int B = (perm[X + 1] + Y) & 255;

    return Lerp(v, Lerp(u, Grad(perm[A    ], x, y), Grad(perm[B    ], x - 1, y)),
            Lerp(u, Grad(perm[A + 1], x, y - 1), Grad(perm[B + 1], x - 1, y - 1)));
}



float BrownianMotion(float x, float y, int octaves, float lacunarity, float persistence) {
    float total = 0.0;
    float frequency = 1.0;
    float amplitude = 1.0;
    float maxAmplitude = 0.0;

    for (int i = 0; i < octaves; i++) {
        total += PerlinNoise(x * frequency, y * frequency) * amplitude;
        frequency *= lacunarity;
        maxAmplitude += amplitude;
        amplitude *= persistence;
    }

    return total / maxAmplitude;
}

float fbm(float2 p, int octaves, float lacunarity, float persistence)
{
    return BrownianMotion(p.x,p.y,octaves,lacunarity,persistence);
}

float TileablePerlinNoise(float x, float y, int width, int height)
{
    float repeatX = x * (width / float(width));
    float repeatY = y * (height / float(height));

    return PerlinNoise(repeatX, repeatY);
}

//3D
float Grad(int hash, float x, float y, float z) {
    int h = hash & 15;
    float u = h < 8 ? x : y;
    float v = h < 4 ? y : (h == 12 || h == 14 ? x : z);
    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

float PerlinNoise(float x, float y, float z) {
    int X = (int)floor(x) & 0xff;
    int Y = (int)floor(y) & 0xff;
    int Z = (int)floor(z) & 0xff;
    x -= floor(x);
    y -= floor(y);
    z -= floor(z);
    float u = Fade(x);
    float v = Fade(y);
    float w = Fade(z);
    int A = (perm[X    ] + Y) & 0xff;
    int AA = (perm[A    ] + Z) & 0xff;
    int AB = (perm[A + 1] + Z) & 0xff;
    int B = (perm[X + 1] + Y) & 0xff;
    int BA = (perm[B    ] + Z) & 0xff;
    int BB = (perm[B + 1] + Z) & 0xff;

    return Lerp(w, Lerp(v, Lerp(u, Grad(perm[AA    ], x, y, z), Grad(perm[BA    ], x - 1, y, z)),
                           Lerp(u, Grad(perm[AB    ], x, y - 1, z), Grad(perm[BB    ], x - 1, y - 1, z))),
                   Lerp(v, Lerp(u, Grad(perm[AA + 1], x, y, z - 1), Grad(perm[BA + 1], x - 1, y, z - 1)),
                           Lerp(u, Grad(perm[AB + 1], x, y - 1, z - 1), Grad(perm[BB + 1], x - 1, y - 1, z - 1))));
}

float BrownianMotion(float x, float y, float z, int octaves, float lacunarity, float persistence) {
    float total = 0.0;
    float frequency = 1.0;
    float amplitude = 1.0;
    float maxAmplitude = 0.0;

    for (int i = 0; i < octaves; i++) {
        total += PerlinNoise(x * frequency, y * frequency, z * frequency) * amplitude;
        frequency *= lacunarity;
        maxAmplitude += amplitude;
        amplitude *= persistence;
    }

    return total / maxAmplitude;
}
float fbm(float3 p, int octaves, float lacunarity, float persistence)
{
    return BrownianMotion(p.x,p.y,p.z,octaves,lacunarity,persistence);
}

float DomainWarping(float x, float y, int octaves, float lacunarity, float persistence)
{
    float2 q = float2(fbm(float2(x,y)+float2(0.0,0.0),octaves,lacunarity,persistence), fbm(float2(x,y)+float2(5.2,1.3),octaves,lacunarity,persistence));
    float2 r = float2(fbm(float2(x,y)+4.0*q+float2(1.7,9.2),octaves,lacunarity,persistence),fbm(float2(x,y)+4.0*q+float2(8.3,2.8),octaves,lacunarity,persistence));
    return fbm(float2(x,y)+4.0*r,octaves,lacunarity,persistence);
}

float Normalize(float noise, float min = 0, float max = 1)
{
    return (max - min) * ((noise + 1.0f) / 2.0f) + min;
}

float FilterRigid(float noise)
{
    float v = 1 - abs(noise);
    return v * v * 2 - 1; 
}

// Main 2D compute shader function
[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void PerlinNoiseShader(
    uint3 DispatchThreadId : SV_DispatchThreadID,
    uint GroupIndex : SV_GroupIndex )
{
    int width, height;
    RenderTarget.GetDimensions(width, height);
    if (DispatchThreadId.x >= width || DispatchThreadId.y >= height || DispatchThreadId.z >= 1) return;
    
    float3 mapPos = float3(DispatchThreadId.x,DispatchThreadId.y,DispatchThreadId.z) ;
    float x = (Position.x + mapPos.x + Offset.x) * (1.0f/Scale);
    float y = (Position.y + mapPos.y + Offset.y) * (1.0f/Scale);
    
    float noise = BrownianMotion(x, y, Octaves, Lacunarity, Persistence);
    // float noise = DomainWarping(x, y, Octaves, Lacunarity, Persistence);

    // Store the result in the texture
    RenderTarget[DispatchThreadId.xy] = float3(noise,noise,noise);
}
