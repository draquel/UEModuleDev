#include "/Engine/Public/Platform.ush"
#include "Noise.usf"

RWBuffer<float> Output;

float3 Position;
float3 Size;

float3 Offset;
int Octaves;
float Frequency;
float Lacunarity;
float Persistence;
float Scale;
int Filter;
int Type;
int NormalizeMode;
float DomainWarp;

// Main 2D compute shader function
[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void NoiseComputeShader(uint3 DispatchThreadId : SV_DispatchThreadID, uint GroupIndex : SV_GroupIndex )
{
    if (DispatchThreadId.x >= Size.x || DispatchThreadId.y >= Size.y || DispatchThreadId.z >= 1) return;

    //Sample point
    float3 mapPos = float3(DispatchThreadId.x,DispatchThreadId.y,DispatchThreadId.z) ;
	float noise = Noise(DispatchThreadId, Position, Offset,Type,Filter,NormalizeMode,Octaves,Frequency,Lacunarity,Persistence,Scale);
    
    //Set Output Buffer
    Output[mapPos.y * Size.x + mapPos.x] = noise;
}
