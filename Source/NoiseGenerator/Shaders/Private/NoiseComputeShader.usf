#include "/Engine/Public/Platform.ush"
#include "Noise.usf"

RWBuffer<float> Output;

float3 Position;
float3 Size;

int Mode;

float3 Offset;
int Octaves;
float Frequency;
float Lacunarity;
float Persistence;
float Scale;
int StepSize;
int Filter;
int Type;
int DensityFunction;
int NormalizeMode;
float DomainWarp;

// Main 2D compute shader function
[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void NoiseComputeShader(uint3 DispatchThreadId : SV_DispatchThreadID, uint GroupIndex : SV_GroupIndex )
{
	uint3 totalGridSize = uint3(Size.x,Size.y,Size.z);
	uint totalThreads = THREADS_X * THREADS_Y * THREADS_Z;
	uint flatIndex = DispatchThreadId.x + DispatchThreadId.y * totalGridSize.x + DispatchThreadId.z * totalGridSize.x * totalGridSize.y;
	for (uint index = flatIndex; index < (totalGridSize.x * totalGridSize.y * totalGridSize.z); index += totalThreads){
		uint3 coords;
		coords.z = index / (totalGridSize.x * totalGridSize.y);
		coords.y = (index / totalGridSize.x) % totalGridSize.y;
		coords.x = index % totalGridSize.x;

		
		float noise = 0.0f;
		if (Mode == 2) {
			noise = Noise(coords*StepSize,Position,Offset,Type,Filter,NormalizeMode,Octaves,Frequency,Lacunarity,Persistence,Scale);
		}
		if (Mode == 3){
			noise = Noise3(coords*StepSize,Position,Size*StepSize,Offset,Type,Filter,NormalizeMode,Octaves,Frequency,Lacunarity,Persistence,Scale,DensityFunction);
		}
		Output[index] = noise;
	}
}